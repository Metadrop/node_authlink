<?php
// $Id$

/**
 * Alter of node_type_form.
 */
function node_authlink_form_node_type_form_alter(&$form, &$form_state) {
  $form['node_authlink'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node authorize link'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
  );
  
  $form['node_authlink']['node_authlink_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable'),
    '#default_value' => variable_get('node_authlink_enable_' . $form['#node_type']->type, FALSE),
    '#description' => t('Disable of this feature will cost erase of authorization keys of all nodes in this node type.'),
  );
  
  $form['node_authlink']['node_authlink_grants'] = array(
    '#type' => 'checkboxes', 
    '#title' => t('Grants to give'), 
    '#default_value' => variable_get('node_authlink_grants_' . $form['#node_type']->type, array()),
    '#options' => array(
      'view' => t('View'),
      'update' => t('Update'), 
      'delete' => t('Delete'), 
    ),
    '#description' => t('What operations will be temporarily given to authorised user for the node. This not affect users who is authorised yet.'),
  );
  
  $form['#submit'][] = 'node_authlink_form_node_type_form_alter_submit';
}

/**
 * Submit for node_type_form.
 */
function node_authlink_form_node_type_form_alter_submit(&$form, &$form_state) {
  $node_types = variable_get('node_authlink_types', array());
  
  // Enabled
  if($form_state['values']['node_authlink_enable']) {
    $node_types[$form_state['values']['type']] = $form_state['values']['type'];
  }
  
  // Disabled
  elseif(!$form_state['values']['node_authlink_enable']) {
    variable_del('node_authlink_enable_' . $form_state['values']['type']);
    variable_del('node_authlink_grants_' . $form_state['values']['type']);
    unset($node_types[$form_state['values']['type']]);
  }
  
  variable_set('node_authlink_types', $node_types);
}

/**
 * Implementation of hook_node_load().
 *
 * Appends authke to loaded node object.
 */
function node_authlink_node_load($nodes, $types) {
  foreach ($nodes as $nid => $node) {
    // TODO: check node type (performance)
    if($authkey = node_authlink_load_authkey($nid))
      $nodes[$nid]->authkey = $authkey;
  }
}

/**
 * Loads key from NID.
 */
function node_authlink_load_authkey($nid) {
  $result = db_query('SELECT authkey FROM {node_authlink_nodes} WHERE nid = :nid', array(':nid' => $nid));
  return $result->fetchField();
}


/**
 * Get edit URL of specified node.
 * @param $node Node object or NID.
 * @param $op Operation to do with node. view, edit (default) or delete. 
 */
function node_authlink_get_url($node, $op = 'edit') {
  if(is_numeric($node))
    $node = node_load($node);
  
  if(!isset($node->authkey))
    return FALSE;
  
  if($op == 'view')
    $op = '';
  else
    $op = '/' . $op;
  
  return url("node/$node->nid$op", array(
    'absolute' => TRUE,
    'query' => array('authkey' => $node->authkey),
  ));
}

/**
 * Implementation of hook_node_access().
 */
function node_authlink_node_access($node, $op, $account) {
  // Ignore if just creating node
  if($op == 'create')
    return NODE_ACCESS_IGNORE;
  
  // Ignore if node type is not enabled
  if(!variable_get('node_authlink_enable_' . $node->type, FALSE))
    return NODE_ACCESS_IGNORE;
  
  // Check key if:
  if(isset($_GET['authkey']) && // authkey param is set
     isset($node->authkey)) { // authkey in node is set
    
    if($node->authkey == $_GET['authkey']) {
      // Start session
      if(!isset($_SESSION))
        drupal_session_initialize();
      
      // Save allowed grants to session
      $_SESSION['node_authlink_nodes'][$node->nid] = variable_get('node_authlink_grants_' . $node->type, array());
    }
  }
  
  // Permit if checked
  if(isset($_SESSION['node_authlink_nodes'][$node->nid]) &&
     in_array($op, $_SESSION['node_authlink_nodes'][$node->nid]))
    return NODE_ACCESS_ALLOW;
}

/**
 * Implementation of hook_node_insert().
 *
 * Generate auth key for the new node.
 */
function node_authlink_node_insert($node) {
  // Ignore if node type is disabled
  if(!variable_get('node_authlink_enable_' . $node->type, FALSE))
    return;
  
  // Generate new key
  $authkey = hash('sha256', drupal_random_bytes(64));
  
  // Save to DB
  db_insert('node_authlink_nodes')
    ->fields(array(
      'nid' => $node->nid, 
      'authkey' => $authkey,
      'created' => time(),
    ))
    ->execute();
}



<?php
// $Id$

/**
 * @file
 * TODO: Enter file description here.
 */

/**
 * Alter of node_type_form.
 */
function node_authlink_form_node_type_form_alter(&$form, &$form_state) {
  $form['node_authlink'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node Auth Key'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
  );
  
  $instance = field_info_instance('node', 'field_node_authlink_authkey', $form['#node_type']->type);
  
  $form['node_authlink']['node_authlink_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable'),
    '#default_value' => (bool)$instance,
    '#description' => t('Disable of this feature will cost erase of authorization keys of all nodes in this node type.'),
  );
  
  if(is_array($instance) && isset($instance['node_authlink_grants']))
    $default_grants = array_keys($instance['node_authlink_grants'], TRUE);
  else
    $default_grants = array();
  
  $form['node_authlink']['node_authlink_grants'] = array(
    '#type' => 'checkboxes', 
    '#title' => t('Grants to give'), 
    '#default_value' => $default_grants,
    '#options' => array(
      'view' => t('View'),
      'update' => t('Update'), 
      'delete' => t('Delete'), 
    ),
    '#description' => t('What operations will be temporarily given to authorised user for the node. This not affect users who is authorised yet.'),
  );
  
  $form['#submit'][] = 'node_authlink_form_node_type_form_alter_submit';
}

/**
 * Submit for node_type_form.
 */
function node_authlink_form_node_type_form_alter_submit(&$form, &$form_state) {
  $instance = field_info_instance('node', 'field_node_authlink_authkey', $form_state['values']['type']);
  
  // Instance does not exist and checkbox is enabled - create filed and instance
  if(!$instance && $form_state['values']['node_authlink_enable']) {
    node_authlink_create_field_instance($form_state['values']['type'], $form_state['values']['node_authlink_grants']);
  }
  
  // Instance exists and checkbox is enabled - update instance
  elseif($instance && $form_state['values']['node_authlink_enable']) {
    $instance['node_authlink_grants'] = $form_state['values']['node_authlink_grants'];
    field_update_instance($instance);
  }
  
  // Instance exists and checkbox is disabled - delete filed and instance
  elseif($instance && !$form_state['values']['node_authlink_enable']) {
    field_delete_instance($instance);
  }
  
  
}

/**
 * Create field instance in specified node type.
 */
function node_authlink_create_field_instance($node_type, $grants) {
  if(!field_info_field('field_node_authlink_authkey')) {
    $field = array(
      'translatable' => '1',
      'settings' => array(
        'code' => '',
        'display_format' => '$display_output = $entity_field_item[\'value\'];',
        'store' => 1,
        'database' => array(
          'data_type' => 'varchar',
          'data_length' => '64',
          'data_size' => 'normal',
          'data_precision' => '10',
          'data_scale' => '2',
          'data_default' => '',
          'data_not_NULL' => 1,
          'data_index' => 0,
        ),
      ),
      'field_name' => 'field_node_authlink_authkey',
      'type' => 'computed',
      'active' => '1',
      'locked' => '0',
      'cardinality' => '1',
    );
    field_create_field($field);
  }
  
  $instance = array(
    'label' => 'Node access link',
    'widget' => array(
      'type' => 'computed',
      'weight' => '1',
      'settings' => array(),
    ),
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'hidden',
        'weight' => '12',
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'description' => '',
    'field_name' => 'field_node_authlink_authkey',
    'entity_type' => 'node',
    'bundle' => $node_type,
    'node_authlink_grants' => $grants,
  );
  field_create_instance($instance);
}

/**
 * Implementation of hook_node_access().
 */
function node_authlink_node_access($node, $op, $account) {
  // Ignore if just creating node
  if($op == 'create')
    return NODE_ACCESS_IGNORE;
  
  // Check key if:
  if(isset($_GET['authkey']) && // authkey param is set
     isset($node->field_node_authlink_authkey) && // authkey in node is set
     !isset($_SESSION['node_authlink_auth_nodes'][$node->nid])) { // grants has not loaded yet
    
    $authkeys = field_get_items('node', $node, 'field_node_authlink_authkey');
    if($authkeys[0]['value'] == $_GET['authkey']) {
      // Start session
      if(!isset($_SESSION))
        drupal_session_initialize();
      
      // Load settings
      $instance = field_info_instance('node', 'field_node_authlink_authkey', $node->type);
      
      // Save authorization to session
      $_SESSION['node_authlink_auth_nodes'][$node->nid] = $instance['node_authlink_grants'];
    }
  }
  
  // Permit if checked
  if(isset($_SESSION['node_authlink_auth_nodes'][$node->nid]) &&
     $_SESSION['node_authlink_auth_nodes'][$node->nid][$op])
    return NODE_ACCESS_ALLOW;
}

/**
 * Computed field callback which generate auth key.
 */
function computed_field_field_node_authlink_authkey_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  
  // Break if set yet and entity is not node
  if(!empty($entity_field[0]['value']) || $entity_type != 'node')
    return;
  
  // Find key in other languages
  foreach($entity->field_node_authlink_authkey as $values) {
    if(!empty($values[0]['value'])) {
      $actual = $values[0]['value'];
      break;
    }
  }
  
  // Generate new key
  if(!isset($actual))
    $actual = hash('sha256', drupal_random_bytes(64));
  
  $entity_field[0]['value'] = $actual;
}

/**
 * Get edit URL of specified node.
 * @param $node Node object or NID.
 */
function node_authlink_get_url($node) {
  if(is_numeric($node))
    $node = node_load($node);
    
  $items = field_get_items('node', $node, 'field_node_authlink_authkey');
  if(!$items)
    return FALSE;
  
  return url("node/$node->nid/edit", array(
    'absolute' => TRUE,
    'query' => array('authkey' => $items[0]['value']),
  ));
}

